{"ast":null,"code":"import * as Act from '../../store';\nimport { deck } from '../Deck/deck';\nconst handleDealClick = (dispatch, betStage, pot) => {\n  if (betStage && pot > 0) {\n    dispatch(Act.setPlayerBet(pot));\n    deck.shuffle();\n    console.log(deck);\n    const card = deck.dealCard();\n    const card2 = deck.dealCard();\n    const card3 = deck.dealCard();\n    const card4 = deck.dealCard();\n    dispatch(Act.playerDealCard(card));\n    dispatch(Act.playerDealCard(card2));\n    dispatch(Act.dealerDealCard(card3));\n    dispatch(Act.dealerDealCard(card4));\n    dispatch(Act.setBetStage(false));\n    dispatch(Act.setDealStage(true));\n  }\n};\nconst handleHitClick = (dispatch, dealStage, splitActive, score, hand1dealt) => {\n  if (!dealStage || !splitActive && score > 21) {\n    return;\n  }\n  if (score > 21) {\n    dispatch(Act.setHand1Dealt(true));\n  }\n  if (!splitActive) {\n    const card = deck.dealCard();\n    dispatch(Act.playerDealCard(card));\n  } else if (splitActive && !hand1dealt) {\n    const card = deck.dealCard();\n    dispatch(Act.playerDealCard(card));\n  } else if (splitActive && hand1dealt) {\n    const card = deck.dealCard();\n    dispatch(Act.playerDealCard2(card));\n  }\n};\nconst handleStandClick = (dispatch, splitActive, betStage, hand1dealt) => {\n  console.log(splitActive);\n  if (!splitActive && !betStage) {\n    console.log(\"stand\");\n    dispatch(ActsetDealStage(false));\n    dispatch(ActsetEvaluateStage(true));\n  } else if (splitActive && !hand1dealt) {\n    dispatch(ActsetHand1Dealt(true));\n  } else if (splitActive && hand1dealt) {\n    dispatch(ActsetDealStage(false));\n    dispatch(ActsetEvaluateStage(true));\n  }\n};\nconst handleSplitClick = (dispatch, hand, splitActive, stack, pot) => {\n  if (hand[0].rank === hand[1].rank && !splitActive && stack >= pot) {\n    dispatch(ActsetSplitActive(true));\n    dispatch(ActplayerSplit());\n    dispatch(ActplayerDealCard(deck.dealCard()));\n    dispatch(ActplayerDealCard2(deck.dealCard()));\n    dispatch(ActsplitChips());\n  }\n};\nconst handleDoubleClick = (dispatch, dealStage, splitActive, score, stack, pot, hand, score2, hand1dealt) => {\n  if (!dealStage || !splitActive && score > 21 || stack < pot || !(hand.length < 3) && !splitActive || score2 > 21) {\n    return;\n  }\n  if (!splitActive) {\n    const card = deck.dealCard();\n    dispatch(ActplayerDealCard(card));\n    dispatch(ActsetDealStage(false));\n    dispatch(ActsetEvaluateStage(true));\n    dispatch(ActdoubleChips());\n  } else if (splitActive && !hand1dealt) {\n    const card = deck.dealCard();\n    dispatch(ActplayerDealCard(card));\n    dispatch(ActsetHand1Dealt(true));\n    dispatch(ActdoubleChips());\n  } else if (splitActive && hand1dealt) {\n    const card = deck.dealCard();\n    dispatch(ActplayerDealCard2(card));\n    dispatch(ActsetDealStage(false));\n    dispatch(ActsetEvaluateStage(true));\n    dispatch(ActdoubleChips2());\n  }\n};\nexport { handleDealClick, handleHitClick };","map":{"version":3,"names":["Act","deck","handleDealClick","dispatch","betStage","pot","setPlayerBet","shuffle","console","log","card","dealCard","card2","card3","card4","playerDealCard","dealerDealCard","setBetStage","setDealStage","handleHitClick","dealStage","splitActive","score","hand1dealt","setHand1Dealt","playerDealCard2","handleStandClick","ActsetDealStage","ActsetEvaluateStage","ActsetHand1Dealt","handleSplitClick","hand","stack","rank","ActsetSplitActive","ActplayerSplit","ActplayerDealCard","ActplayerDealCard2","ActsplitChips","handleDoubleClick","score2","length","ActdoubleChips","ActdoubleChips2"],"sources":["/Users/adamdockstader/repos/blackjack/src/components/Choices/choice_logic.tsx"],"sourcesContent":["import * as Act from '../../store';\nimport {deck} from '../Deck/deck';\nimport {Dispatch} from 'redux';\n\nconst handleDealClick = (dispatch: Dispatch, betStage: boolean, pot: number) => {\n      \n    if(betStage && pot > 0){\n      dispatch(Act.setPlayerBet(pot));\n      deck.shuffle();\n      console.log(deck);\n      const card = deck.dealCard();\n      const card2 = deck.dealCard();\n      const card3 = deck.dealCard();\n      const card4 = deck.dealCard();\n      dispatch(Act.playerDealCard(card));\n      dispatch(Act.playerDealCard(card2));\n      dispatch(Act.dealerDealCard(card3));\n      dispatch(Act.dealerDealCard(card4));\n      dispatch(Act.setBetStage(false));\n      dispatch(Act.setDealStage(true));\n    }\n  };\n  const handleHitClick = (dispatch: Dispatch, dealStage: boolean, splitActive: boolean, score: number, hand1dealt: boolean) => {\n    if(!dealStage || (!splitActive && score> 21)){\n      return;\n    }\n    if(score > 21){\n      dispatch(Act.setHand1Dealt(true));\n    }\n    if(!splitActive){\n      const card = deck.dealCard();\n      dispatch(Act.playerDealCard(card));\n    } else if(splitActive && !hand1dealt){\n      const card = deck.dealCard();\n      dispatch(Act.playerDealCard(card));\n    } else if(splitActive && hand1dealt){\n      const card = deck.dealCard();\n      dispatch(Act.playerDealCard2(card));\n    }\n  };\n  const handleStandClick = (dispatch: Dispatch, splitActive: boolean, betStage: boolean, hand1dealt: boolean) => {\n    console.log(splitActive)\n    if(!splitActive && !betStage){\n      console.log(\"stand\");\n      dispatch(ActsetDealStage(false));\n    dispatch(ActsetEvaluateStage(true));\n  } else if(splitActive && !hand1dealt){\n    dispatch(ActsetHand1Dealt(true));\n  } else if(splitActive && hand1dealt){\n    dispatch(ActsetDealStage(false));\n    dispatch(ActsetEvaluateStage(true));\n  }\n  };\n  const handleSplitClick = (dispatch: Dispatch, hand: Array[], splitActive: boolean, stack: number, pot: number) => {\n    if(hand[0].rank===hand[1].rank && !splitActive && stack >= pot){\n      dispatch(ActsetSplitActive(true));\n      dispatch(ActplayerSplit());\n      dispatch(ActplayerDealCard(deck.dealCard()));\n      dispatch(ActplayerDealCard2(deck.dealCard()));\n      dispatch(ActsplitChips());\n\n    }\n\n\n  };\n  const handleDoubleClick = (dispatch:Dispatch, dealStage: boolean, splitActive: boolean, score: number, stack: number, pot: number, hand: array[], score2: number, hand1dealt: boolean) => {\n    if(!dealStage || (!splitActive && score > 21) || stack < pot || (!(hand.length < 3)&& !splitActive) || score2 > 21 ){\n      return;\n    }\n    if(!splitActive){\n    const card = deck.dealCard();\n    dispatch(ActplayerDealCard(card));\n    dispatch(ActsetDealStage(false));\n    dispatch(ActsetEvaluateStage(true));\n    dispatch(ActdoubleChips());\n    } else if(splitActive && !hand1dealt){\n      const card = deck.dealCard();\n      dispatch(ActplayerDealCard(card));\n      dispatch(ActsetHand1Dealt(true));\n      dispatch(ActdoubleChips());\n    } else if(splitActive && hand1dealt){\n      const card = deck.dealCard();\n      dispatch(ActplayerDealCard2(card));\n      dispatch(ActsetDealStage(false));\n     dispatch(ActsetEvaluateStage(true));\n      dispatch(ActdoubleChips2());\n    }\n\n  };\n\nexport { handleDealClick, handleHitClick};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}