{"ast":null,"code":"import { setTextOutcome2, setBetStage, resetDealerHand, resetPlayerHand, setDealStage, setEvaluateStage, setSplitActive, setTextOutcome, setDealerTurnComplete, setGameOver, setHand1Dealt, setIsBlackjack } from \"../../store\";\nexport const resetGame = () => {\n  dispatch(setGameOver(false));\n  dispatch(setEvaluateStage(false));\n  dispatch(setBetStage(true));\n  dispatch(setDealStage(false));\n  dispatch(setSplitActive(false));\n  dispatch(setDealerTurnComplete(false));\n  dispatch(setTextOutcome(''));\n  dispatch(setTextOutcome2(''));\n  dispatch(resetDealerHand());\n  dispatch(resetPlayerHand());\n  dispatch(setHand1Dealt(false));\n  dispatch(setIsBlackjack(false));\n  deck.resetDeck();\n};","map":{"version":3,"names":["setTextOutcome2","setBetStage","resetDealerHand","resetPlayerHand","setDealStage","setEvaluateStage","setSplitActive","setTextOutcome","setDealerTurnComplete","setGameOver","setHand1Dealt","setIsBlackjack","resetGame","dispatch","deck","resetDeck"],"sources":["/Users/adamdockstader/repos/blackjack/src/components/Choices/choiceController.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport {setPlayerScore2, resetChips, setHandsPushed, setPlayerScore, setTextOutcome2, doubleChips2, playerDealCard, setPlayerBet, setBetStage, resetDealerHand, resetPlayerHand, setDealStage, dealerDealCard, setEvaluateStage, doubleChips, setSplitActive, playerSplit, setDealerScore, setTextOutcome, setScore, removeChips, winChips, playerDealCard2, setDealerTurnComplete, setGameOver, setHandsLost, setHandsWon, splitChips, setHand1Dealt, setIsBlackjack } from \"../../store\";\n\n\nexport const resetGame = () => { \n    \n    dispatch(setGameOver(false));\n    dispatch(setEvaluateStage(false));\n    dispatch(setBetStage(true));\n    dispatch(setDealStage(false));\n    dispatch(setSplitActive(false));\n    dispatch(setDealerTurnComplete(false));\n    dispatch(setTextOutcome(''));\n    dispatch(setTextOutcome2(''));\n    dispatch(resetDealerHand());\n    dispatch(resetPlayerHand());\n    dispatch(setHand1Dealt(false));\n    dispatch(setIsBlackjack(false));\n    deck.resetDeck();\n  };\n\n\n\n"],"mappings":"AACA,SAAqEA,eAAe,EAA8CC,WAAW,EAAEC,eAAe,EAAEC,eAAe,EAAEC,YAAY,EAAkBC,gBAAgB,EAAeC,cAAc,EAA+BC,cAAc,EAAoDC,qBAAqB,EAAEC,WAAW,EAAyCC,aAAa,EAAEC,cAAc,QAAQ,aAAa;AAG1d,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAE3BC,QAAQ,CAACJ,WAAW,CAAC,KAAK,CAAC,CAAC;EAC5BI,QAAQ,CAACR,gBAAgB,CAAC,KAAK,CAAC,CAAC;EACjCQ,QAAQ,CAACZ,WAAW,CAAC,IAAI,CAAC,CAAC;EAC3BY,QAAQ,CAACT,YAAY,CAAC,KAAK,CAAC,CAAC;EAC7BS,QAAQ,CAACP,cAAc,CAAC,KAAK,CAAC,CAAC;EAC/BO,QAAQ,CAACL,qBAAqB,CAAC,KAAK,CAAC,CAAC;EACtCK,QAAQ,CAACN,cAAc,CAAC,EAAE,CAAC,CAAC;EAC5BM,QAAQ,CAACb,eAAe,CAAC,EAAE,CAAC,CAAC;EAC7Ba,QAAQ,CAACX,eAAe,CAAC,CAAC,CAAC;EAC3BW,QAAQ,CAACV,eAAe,CAAC,CAAC,CAAC;EAC3BU,QAAQ,CAACH,aAAa,CAAC,KAAK,CAAC,CAAC;EAC9BG,QAAQ,CAACF,cAAc,CAAC,KAAK,CAAC,CAAC;EAC/BG,IAAI,CAACC,SAAS,CAAC,CAAC;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}