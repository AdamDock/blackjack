{"ast":null,"code":"import Header from\"./Header/Header\";import CardsList from\"./Cards/CardsList\";import ChipsList from\"./Chips/ChipsList\";import ChoiceList from\"./Choices/ChoiceList\";import{useEffect,useState}from\"react\";import{useSelector}from\"react-redux\";import Modal from\"./ReusableForms/Modal\";import Button from\"./ReusableForms/Button\";/*\nimport { useState } from 'react';\nimport Modal from '../components/Modal';\nimport Button from '../components/Button';\n\nfunction ModalPage() {*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Table=()=>{const{gameOver,gameScore,hands,handsWon,handsLost}=useSelector(state=>state.game);const{pot,stack}=useSelector(state=>state.chips);const[showModal,setShowModal]=useState(false);const[showModal2,setShowModal2]=useState(false);useEffect(()=>{if(pot===0&&stack===0){setTimeout(()=>{setShowModal(true);},3000);}},[gameOver]);useEffect(()=>{setShowModal2(true);},[]);const handleClose=()=>{setShowModal(false);};const handleClose2=()=>{setShowModal2(false);};const actionBar2=/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Button,{onClick:handleClose2,primary:true,children:\"Play Now!\"})});const modal2=/*#__PURE__*/_jsx(Modal,{onClose:handleClose2,actionBar:actionBar2,children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Are you ready to play blackjack?\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Start with 5000 chips and try your luck in this casino game!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-medium font-medium\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-lg font-bold\",children:\"Steps\"}),/*#__PURE__*/_jsxs(\"ol\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"1.) Place a bet by clicking on the chips. Click reset if you need to restart.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"2.) Click Deal to be dealt a hand and the dealer will be dealt a hand as well.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"3.) Click Hit to be dealt another card. You can hit as many times as you want until you bust or stand. You also have the option to double and split. A double is when you have your initial hand and you double your bet and get one more card. A split is when you have two cards of the same rank and you split them into two hands and maintain your bet for both hands.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"4.) Click Stand to end your turn. The dealer will then play their hand. The dealer must hit if they have a score of 16 or less and must stand if they have a score of 17 or more.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"5.) If you win, you will win your bet. If you lose, you will lose your bet. If you get blackjack, you will win 1.5x your bet.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"6.) If you run out of chips, you lose the game.\"})]})]})]})});const actionBar=/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Button,{onClick:()=>{window.location.reload();},primary:true,children:\"Restart\"})});const modal=/*#__PURE__*/_jsxs(Modal,{onClose:handleClose,actionBar:actionBar,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-xl font-bold\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Another one bites the dust!!!\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Game Over!\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"You have lost the game!!!\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-col justify-center text-medium font-medium\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"Final Stats\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Final Score: \",gameScore,\" \"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total Hands played: \",hands,\" \"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total Hands won: \",handsWon,\" \"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total Hands lost: \",handsLost]})]})]});return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col border-2 border-white h-screen \",children:[showModal&&modal,showModal2&&modal2,/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(CardsList,{}),/*#__PURE__*/_jsx(ChoiceList,{}),/*#__PURE__*/_jsx(ChipsList,{}),/*#__PURE__*/_jsx(\"div\",{})]});};export default Table;","map":{"version":3,"names":["Header","CardsList","ChipsList","ChoiceList","useEffect","useState","useSelector","Modal","Button","jsx","_jsx","jsxs","_jsxs","Table","gameOver","gameScore","hands","handsWon","handsLost","state","game","pot","stack","chips","showModal","setShowModal","showModal2","setShowModal2","setTimeout","handleClose","handleClose2","actionBar2","children","onClick","primary","modal2","onClose","actionBar","className","window","location","reload","modal"],"sources":["/Users/adamdockstader/repos/blackjack/src/components/table.tsx"],"sourcesContent":["import Header from \"./Header/Header\";\nimport CardsList from \"./Cards/CardsList\";\nimport ChipsList from \"./Chips/ChipsList\";\nimport ChoiceList from \"./Choices/ChoiceList\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Modal from \"./ReusableForms/Modal\";\nimport Button from \"./ReusableForms/Button\";\n\n/*\nimport { useState } from 'react';\nimport Modal from '../components/Modal';\nimport Button from '../components/Button';\n\nfunction ModalPage() {*/\n  \nconst Table = () => {\n    const { gameOver, gameScore, hands, handsWon, handsLost } = useSelector((state: any) => state.game);\n    const { pot, stack } = useSelector((state: any) => state.chips);\n    const [showModal, setShowModal] = useState(false);\n    const [showModal2, setShowModal2] = useState(false);\n    useEffect(() => {\n        if (pot === 0 && stack === 0) {\n            setTimeout(() => {\n                setShowModal(true);\n            }, 3000);\n        }\n      }, [gameOver]);\n      useEffect(() => {\n        setShowModal2(true);\n      },[]);\n\n \n\n  const handleClose = () => {\n    setShowModal(false);\n  };\n  const handleClose2 = () => {\n    setShowModal2(false);\n  }\n  const actionBar2 = (\n    <div>\n      <Button onClick={handleClose2} primary>\n        Play Now!\n      </Button>\n    </div>\n  );\n  const modal2 = (\n    <Modal onClose={handleClose2} actionBar={actionBar2}>\n        <div>\n        <h1>Are you ready to play blackjack?</h1>\n        <h1>Start with 5000 chips and try your luck in this casino game!</h1>\n        <div className=\"text-medium font-medium\">\n        <h1 className=\"text-lg font-bold\">Steps</h1>\n        <ol>\n          <li>\n            1.) Place a bet by clicking on the chips. Click reset if you need to restart.\n          </li>\n          <li>\n            2.) Click Deal to be dealt a hand and the dealer will be dealt a hand as well.\n          </li>\n          <li>\n            3.) Click Hit to be dealt another card. You can hit as many times as you want until you bust or stand. You also have the option to double and split. A double is when you have your initial hand and you double your bet and get one more card. A split is when you have two cards of the same rank and you split them into two hands and maintain your bet for both hands. \n          </li>\n          <li>\n            4.) Click Stand to end your turn. The dealer will then play their hand. The dealer must hit if they have a score of 16 or less and must stand if they have a score of 17 or more.\n          </li>\n          <li>\n            5.) If you win, you will win your bet. If you lose, you will lose your bet. If you get blackjack, you will win 1.5x your bet. \n          </li>\n          <li>\n            6.) If you run out of chips, you lose the game.\n          </li>\n\n        </ol>\n\n        </div>\n\n        </div>\n      \n\n    </Modal>\n  );\n\n  const actionBar = (\n    <div>\n      <Button onClick={()=>{window.location.reload()}} primary>\n        Restart\n      </Button>\n    </div>\n  );\n  const modal = (\n    <Modal onClose={handleClose} actionBar={actionBar}>\n        <div className=\"text-xl font-bold\">\n          <h1>Another one bites the dust!!!</h1>\n        <h1>Game Over!</h1>\n        <h1>You have lost the game!!!</h1>\n        </div>\n        <div className=\"flex-col justify-center text-medium font-medium\">\n            <p>Final Stats</p>\n            <p>Final Score: {gameScore} </p>\n            <p>Total Hands played: {hands} </p>\n            <p>Total Hands won: {handsWon} </p>\n            <p>Total Hands lost: {handsLost}</p>\n\n        </div>\n      \n\n    </Modal>\n  );\n\n    return (<div className=\"flex flex-col border-2 border-white h-screen \">\n        \n        {showModal && modal}\n        {showModal2 && modal2}\n\n        <Header />\n        <CardsList />\n        <ChoiceList />\n        <ChipsList />\n\n        <div>\n\n        </div>\n    </div>);\n}\nexport default Table;"],"mappings":"AAAA,MAAO,CAAAA,MAAM,KAAM,iBAAiB,CACpC,MAAO,CAAAC,SAAS,KAAM,mBAAmB,CACzC,MAAO,CAAAC,SAAS,KAAM,mBAAmB,CACzC,MAAO,CAAAC,UAAU,KAAM,sBAAsB,CAC7C,OAASC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,WAAW,KAAQ,aAAa,CACzC,MAAO,CAAAC,KAAK,KAAM,uBAAuB,CACzC,MAAO,CAAAC,MAAM,KAAM,wBAAwB,CAE3C;AACA;AACA;AACA;AACA;AACA,wBALA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAOA,KAAM,CAAAC,KAAK,CAAGA,CAAA,GAAM,CAChB,KAAM,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,KAAK,CAAEC,QAAQ,CAAEC,SAAU,CAAC,CAAGZ,WAAW,CAAEa,KAAU,EAAKA,KAAK,CAACC,IAAI,CAAC,CACnG,KAAM,CAAEC,GAAG,CAAEC,KAAM,CAAC,CAAGhB,WAAW,CAAEa,KAAU,EAAKA,KAAK,CAACI,KAAK,CAAC,CAC/D,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGpB,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACqB,UAAU,CAAEC,aAAa,CAAC,CAAGtB,QAAQ,CAAC,KAAK,CAAC,CACnDD,SAAS,CAAC,IAAM,CACZ,GAAIiB,GAAG,GAAK,CAAC,EAAIC,KAAK,GAAK,CAAC,CAAE,CAC1BM,UAAU,CAAC,IAAM,CACbH,YAAY,CAAC,IAAI,CAAC,CACtB,CAAC,CAAE,IAAI,CAAC,CACZ,CACF,CAAC,CAAE,CAACX,QAAQ,CAAC,CAAC,CACdV,SAAS,CAAC,IAAM,CACduB,aAAa,CAAC,IAAI,CAAC,CACrB,CAAC,CAAC,EAAE,CAAC,CAIT,KAAM,CAAAE,WAAW,CAAGA,CAAA,GAAM,CACxBJ,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CACD,KAAM,CAAAK,YAAY,CAAGA,CAAA,GAAM,CACzBH,aAAa,CAAC,KAAK,CAAC,CACtB,CAAC,CACD,KAAM,CAAAI,UAAU,cACdrB,IAAA,QAAAsB,QAAA,cACEtB,IAAA,CAACF,MAAM,EAACyB,OAAO,CAAEH,YAAa,CAACI,OAAO,MAAAF,QAAA,CAAC,WAEvC,CAAQ,CAAC,CACN,CACN,CACD,KAAM,CAAAG,MAAM,cACVzB,IAAA,CAACH,KAAK,EAAC6B,OAAO,CAAEN,YAAa,CAACO,SAAS,CAAEN,UAAW,CAAAC,QAAA,cAChDpB,KAAA,QAAAoB,QAAA,eACAtB,IAAA,OAAAsB,QAAA,CAAI,kCAAgC,CAAI,CAAC,cACzCtB,IAAA,OAAAsB,QAAA,CAAI,8DAA4D,CAAI,CAAC,cACrEpB,KAAA,QAAK0B,SAAS,CAAC,yBAAyB,CAAAN,QAAA,eACxCtB,IAAA,OAAI4B,SAAS,CAAC,mBAAmB,CAAAN,QAAA,CAAC,OAAK,CAAI,CAAC,cAC5CpB,KAAA,OAAAoB,QAAA,eACEtB,IAAA,OAAAsB,QAAA,CAAI,+EAEJ,CAAI,CAAC,cACLtB,IAAA,OAAAsB,QAAA,CAAI,gFAEJ,CAAI,CAAC,cACLtB,IAAA,OAAAsB,QAAA,CAAI,6WAEJ,CAAI,CAAC,cACLtB,IAAA,OAAAsB,QAAA,CAAI,mLAEJ,CAAI,CAAC,cACLtB,IAAA,OAAAsB,QAAA,CAAI,+HAEJ,CAAI,CAAC,cACLtB,IAAA,OAAAsB,QAAA,CAAI,iDAEJ,CAAI,CAAC,EAEH,CAAC,EAEA,CAAC,EAED,CAAC,CAGH,CACR,CAED,KAAM,CAAAK,SAAS,cACb3B,IAAA,QAAAsB,QAAA,cACEtB,IAAA,CAACF,MAAM,EAACyB,OAAO,CAAEA,CAAA,GAAI,CAACM,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE,CAACP,OAAO,MAAAF,QAAA,CAAC,SAEzD,CAAQ,CAAC,CACN,CACN,CACD,KAAM,CAAAU,KAAK,cACT9B,KAAA,CAACL,KAAK,EAAC6B,OAAO,CAAEP,WAAY,CAACQ,SAAS,CAAEA,SAAU,CAAAL,QAAA,eAC9CpB,KAAA,QAAK0B,SAAS,CAAC,mBAAmB,CAAAN,QAAA,eAChCtB,IAAA,OAAAsB,QAAA,CAAI,+BAA6B,CAAI,CAAC,cACxCtB,IAAA,OAAAsB,QAAA,CAAI,YAAU,CAAI,CAAC,cACnBtB,IAAA,OAAAsB,QAAA,CAAI,2BAAyB,CAAI,CAAC,EAC7B,CAAC,cACNpB,KAAA,QAAK0B,SAAS,CAAC,iDAAiD,CAAAN,QAAA,eAC5DtB,IAAA,MAAAsB,QAAA,CAAG,aAAW,CAAG,CAAC,cAClBpB,KAAA,MAAAoB,QAAA,EAAG,eAAa,CAACjB,SAAS,CAAC,GAAC,EAAG,CAAC,cAChCH,KAAA,MAAAoB,QAAA,EAAG,sBAAoB,CAAChB,KAAK,CAAC,GAAC,EAAG,CAAC,cACnCJ,KAAA,MAAAoB,QAAA,EAAG,mBAAiB,CAACf,QAAQ,CAAC,GAAC,EAAG,CAAC,cACnCL,KAAA,MAAAoB,QAAA,EAAG,oBAAkB,CAACd,SAAS,EAAI,CAAC,EAEnC,CAAC,EAGH,CACR,CAEC,mBAAQN,KAAA,QAAK0B,SAAS,CAAC,+CAA+C,CAAAN,QAAA,EAEjER,SAAS,EAAIkB,KAAK,CAClBhB,UAAU,EAAIS,MAAM,cAErBzB,IAAA,CAACV,MAAM,GAAE,CAAC,cACVU,IAAA,CAACT,SAAS,GAAE,CAAC,cACbS,IAAA,CAACP,UAAU,GAAE,CAAC,cACdO,IAAA,CAACR,SAAS,GAAE,CAAC,cAEbQ,IAAA,SAEK,CAAC,EACL,CAAC,CACV,CAAC,CACD,cAAe,CAAAG,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}