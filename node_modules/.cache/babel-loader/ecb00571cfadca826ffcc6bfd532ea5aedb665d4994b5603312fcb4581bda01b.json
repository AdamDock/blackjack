{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState: {\n    betStage: true,\n    dealStage: false,\n    evaluateStage: false,\n    splitActive: false,\n    hand1dealt: false,\n    dealerTurnComplete: false,\n    gameScore: 0,\n    textOutcome: '',\n    textOutcome2: '',\n    gameOver: false,\n    hands: 0,\n    handsWon: 0,\n    handsLost: 0\n  },\n  reducers: {\n    setBetStage: (state, action) => {\n      state.betStage = action.payload;\n    },\n    setDealStage: (state, action) => {\n      state.dealStage = action.payload;\n    },\n    setEvaluateStage: (state, action) => {\n      state.evaluateStage = action.payload;\n    },\n    setScore: (state, action) => {\n      state.gameScore += action.payload;\n      console.log(\"gamescore: \", state.gameScore);\n    },\n    setSplitActive: (state, action) => {\n      state.splitActive = action.payload;\n      state.hand2deal = action.payload;\n    },\n    setTextOutcome: (state, action) => {\n      state.textOutcome = action.payload;\n    },\n    setDealerTurnComplete: (state, action) => {\n      state.dealerTurnComplete = action.payload;\n    },\n    setGameOver: (state, action) => {\n      state.gameOver = action.payload;\n    },\n    setHandsWon: state => {\n      state.handsWon++;\n      state.hands++;\n    },\n    setHandsLost: state => {\n      state.handsLost++;\n      state.hands++;\n    },\n    setHand1Dealt: (state, action) => {\n      state.hand1dealt = action.payload;\n    },\n    setTextOutcome2: (state, action) => {\n      state.textOutcome2 = action.payload;\n    }\n  }\n});\nexport const {\n  setTextOutcome2,\n  setHand1Dealt,\n  setHandsLost,\n  setHandsWon,\n  setGameOver,\n  setDealerTurnComplete,\n  setBetStage,\n  setDealStage,\n  setEvaluateStage,\n  setScore,\n  setSplitActive,\n  setTextOutcome\n} = gameSlice.actions;\nexport const gameReducer = gameSlice.reducer;","map":{"version":3,"names":["createSlice","gameSlice","name","initialState","betStage","dealStage","evaluateStage","splitActive","hand1dealt","dealerTurnComplete","gameScore","textOutcome","textOutcome2","gameOver","hands","handsWon","handsLost","reducers","setBetStage","state","action","payload","setDealStage","setEvaluateStage","setScore","console","log","setSplitActive","hand2deal","setTextOutcome","setDealerTurnComplete","setGameOver","setHandsWon","setHandsLost","setHand1Dealt","setTextOutcome2","actions","gameReducer","reducer"],"sources":["/Users/adamdockstader/repos/blackjack/src/store/slices/gameSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst gameSlice = createSlice({\n    name: 'game',\n    initialState: {\n        betStage: true,\n        dealStage: false,\n        evaluateStage: false,\n        splitActive: false,\n        hand1dealt: false,\n        dealerTurnComplete: false,\n        gameScore: 0,\n        textOutcome: '',\n        textOutcome2: '',\n        gameOver: false,\n        hands: 0,\n        handsWon: 0,\n        handsLost: 0,\n        \n    },\n    reducers: {\n        setBetStage: (state, action) => {\n            state.betStage = action.payload;\n        },\n        setDealStage: (state, action) => {\n            state.dealStage = action.payload;\n        },\n        setEvaluateStage: (state, action) => {\n            state.evaluateStage = action.payload;\n        },\n        setScore: (state, action) => {\n            state.gameScore += action.payload;\n            console.log(\"gamescore: \", state.gameScore);\n        },\n        setSplitActive: (state, action) => {\n            state.splitActive = action.payload;\n            state.hand2deal = action.payload;\n        },\n        setTextOutcome: (state, action) => {\n            state.textOutcome = action.payload;\n        },\n        setDealerTurnComplete: (state, action) => {\n            state.dealerTurnComplete = action.payload;\n        },\n        setGameOver: (state, action) => {\n            state.gameOver = action.payload;\n        },  \n        setHandsWon: (state) => {\n            state.handsWon++;\n            state.hands++;\n        },\n        setHandsLost: (state) => {\n            state.handsLost++;\n            state.hands++;\n        },\n        setHand1Dealt: (state, action) => {\n            state.hand1dealt = action.payload;\n        },\n        setTextOutcome2: (state, action) => {\n            state.textOutcome2 = action.payload;\n        },\n        \n    },\n});\n\nexport const { setTextOutcome2, setHand1Dealt, setHandsLost, setHandsWon, setGameOver, setDealerTurnComplete, setBetStage, setDealStage, setEvaluateStage, setScore, setSplitActive, setTextOutcome } = gameSlice.actions;\nexport const gameReducer = gameSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC1BE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACVC,QAAQ,EAAE,IAAI;IACdC,SAAS,EAAE,KAAK;IAChBC,aAAa,EAAE,KAAK;IACpBC,WAAW,EAAE,KAAK;IAClBC,UAAU,EAAE,KAAK;IACjBC,kBAAkB,EAAE,KAAK;IACzBC,SAAS,EAAE,CAAC;IACZC,WAAW,EAAE,EAAE;IACfC,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE,KAAK;IACfC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAE;EAEf,CAAC;EACDC,QAAQ,EAAE;IACNC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACf,QAAQ,GAAGgB,MAAM,CAACC,OAAO;IACnC,CAAC;IACDC,YAAY,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACd,SAAS,GAAGe,MAAM,CAACC,OAAO;IACpC,CAAC;IACDE,gBAAgB,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACb,aAAa,GAAGc,MAAM,CAACC,OAAO;IACxC,CAAC;IACDG,QAAQ,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MACzBD,KAAK,CAACT,SAAS,IAAIU,MAAM,CAACC,OAAO;MACjCI,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEP,KAAK,CAACT,SAAS,CAAC;IAC/C,CAAC;IACDiB,cAAc,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACZ,WAAW,GAAGa,MAAM,CAACC,OAAO;MAClCF,KAAK,CAACS,SAAS,GAAGR,MAAM,CAACC,OAAO;IACpC,CAAC;IACDQ,cAAc,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACR,WAAW,GAAGS,MAAM,CAACC,OAAO;IACtC,CAAC;IACDS,qBAAqB,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MACtCD,KAAK,CAACV,kBAAkB,GAAGW,MAAM,CAACC,OAAO;IAC7C,CAAC;IACDU,WAAW,EAAEA,CAACZ,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACN,QAAQ,GAAGO,MAAM,CAACC,OAAO;IACnC,CAAC;IACDW,WAAW,EAAGb,KAAK,IAAK;MACpBA,KAAK,CAACJ,QAAQ,EAAE;MAChBI,KAAK,CAACL,KAAK,EAAE;IACjB,CAAC;IACDmB,YAAY,EAAGd,KAAK,IAAK;MACrBA,KAAK,CAACH,SAAS,EAAE;MACjBG,KAAK,CAACL,KAAK,EAAE;IACjB,CAAC;IACDoB,aAAa,EAAEA,CAACf,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACX,UAAU,GAAGY,MAAM,CAACC,OAAO;IACrC,CAAC;IACDc,eAAe,EAAEA,CAAChB,KAAK,EAAEC,MAAM,KAAK;MAChCD,KAAK,CAACP,YAAY,GAAGQ,MAAM,CAACC,OAAO;IACvC;EAEJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEc,eAAe;EAAED,aAAa;EAAED,YAAY;EAAED,WAAW;EAAED,WAAW;EAAED,qBAAqB;EAAEZ,WAAW;EAAEI,YAAY;EAAEC,gBAAgB;EAAEC,QAAQ;EAAEG,cAAc;EAAEE;AAAe,CAAC,GAAG5B,SAAS,CAACmC,OAAO;AACzN,OAAO,MAAMC,WAAW,GAAGpC,SAAS,CAACqC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}