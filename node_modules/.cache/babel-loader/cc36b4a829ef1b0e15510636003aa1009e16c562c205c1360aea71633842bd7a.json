{"ast":null,"code":"import * as Act from '../../store';\nimport { deck } from '../Deck/deck';\nconst handleDealClick = (dispatch, betStage, pot) => {\n  if (betStage && pot > 0) {\n    dispatch(Act.setPlayerBet(pot));\n    deck.shuffle();\n    console.log(deck);\n    const card = deck.dealCard();\n    const card2 = deck.dealCard();\n    const card3 = deck.dealCard();\n    const card4 = deck.dealCard();\n    dispatch(Act.playerDealCard(card));\n    dispatch(Act.playerDealCard(card2));\n    dispatch(Act.dealerDealCard(card3));\n    dispatch(Act.dealerDealCard(card4));\n    dispatch(Act.setBetStage(false));\n    dispatch(Act.setDealStage(true));\n  }\n};\nconst handleHitClick = (dispatch, dealStage, splitActive, score, hand1dealt) => {\n  if (!dealStage || !splitActive && score > 21) {\n    return;\n  }\n  if (score > 21) {\n    dispatch(Act.setHand1Dealt(true));\n  }\n  if (!splitActive) {\n    const card = deck.dealCard();\n    dispatch(Act.playerDealCard(card));\n  } else if (splitActive && !hand1dealt) {\n    const card = deck.dealCard();\n    dispatch(Act.playerDealCard(card));\n  } else if (splitActive && hand1dealt) {\n    const card = deck.dealCard();\n    dispatch(Act.playerDealCard2(card));\n  }\n};\nconst handleStandClick = (dispatch, splitActive, betStage) => {\n  console.log(splitActive);\n  if (!splitActive && !betStage) {\n    console.log(\"stand\");\n    dispatch(setDealStage(false));\n    dispatch(setEvaluateStage(true));\n  } else if (splitActive && !hand1dealt) {\n    dispatch(setHand1Dealt(true));\n  } else if (splitActive && hand1dealt) {\n    dispatch(setDealStage(false));\n    dispatch(setEvaluateStage(true));\n  }\n};\nconst handleSplitClick = () => {\n  if (hand[0].rank === hand[1].rank && !splitActive && stack >= pot) {\n    dispatch(setSplitActive(true));\n    dispatch(playerSplit());\n    dispatch(playerDealCard(deck.dealCard()));\n    dispatch(playerDealCard2(deck.dealCard()));\n    dispatch(splitChips());\n  }\n};\nconst handleDoubleClick = () => {\n  if (!dealStage || !splitActive && score > 21 || stack < pot || !(hand.length < 3) && !splitActive || score2 > 21) {\n    return;\n  }\n  if (!splitActive) {\n    const card = deck.dealCard();\n    dispatch(playerDealCard(card));\n    dispatch(setDealStage(false));\n    dispatch(setEvaluateStage(true));\n    dispatch(doubleChips());\n  } else if (splitActive && !hand1dealt) {\n    const card = deck.dealCard();\n    dispatch(playerDealCard(card));\n    dispatch(setHand1Dealt(true));\n    dispatch(doubleChips());\n  } else if (splitActive && hand1dealt) {\n    const card = deck.dealCard();\n    dispatch(playerDealCard2(card));\n    dispatch(setDealStage(false));\n    dispatch(setEvaluateStage(true));\n    dispatch(doubleChips2());\n  }\n};\nexport { handleDealClick, handleHitClick };","map":{"version":3,"names":["Act","deck","handleDealClick","dispatch","betStage","pot","setPlayerBet","shuffle","console","log","card","dealCard","card2","card3","card4","playerDealCard","dealerDealCard","setBetStage","setDealStage","handleHitClick","dealStage","splitActive","score","hand1dealt","setHand1Dealt","playerDealCard2","handleStandClick","setEvaluateStage","handleSplitClick","hand","rank","stack","setSplitActive","playerSplit","splitChips","handleDoubleClick","length","score2","doubleChips","doubleChips2"],"sources":["/Users/adamdockstader/repos/blackjack/src/components/Choices/choice_logic.tsx"],"sourcesContent":["import * as Act from '../../store';\nimport {deck} from '../Deck/deck';\nimport {Dispatch} from 'redux';\n\nconst handleDealClick = (dispatch: Dispatch, betStage: boolean, pot: number) => {\n      \n    if(betStage && pot > 0){\n      dispatch(Act.setPlayerBet(pot));\n      deck.shuffle();\n      console.log(deck);\n      const card = deck.dealCard();\n      const card2 = deck.dealCard();\n      const card3 = deck.dealCard();\n      const card4 = deck.dealCard();\n      dispatch(Act.playerDealCard(card));\n      dispatch(Act.playerDealCard(card2));\n      dispatch(Act.dealerDealCard(card3));\n      dispatch(Act.dealerDealCard(card4));\n      dispatch(Act.setBetStage(false));\n      dispatch(Act.setDealStage(true));\n    }\n  };\n  const handleHitClick = (dispatch: Dispatch, dealStage: boolean, splitActive: boolean, score: number, hand1dealt: boolean) => {\n    if(!dealStage || (!splitActive && score> 21)){\n      return;\n    }\n    if(score > 21){\n      dispatch(Act.setHand1Dealt(true));\n    }\n    if(!splitActive){\n      const card = deck.dealCard();\n      dispatch(Act.playerDealCard(card));\n    } else if(splitActive && !hand1dealt){\n      const card = deck.dealCard();\n      dispatch(Act.playerDealCard(card));\n    } else if(splitActive && hand1dealt){\n      const card = deck.dealCard();\n      dispatch(Act.playerDealCard2(card));\n    }\n  };\n  const handleStandClick = (dispatch: Dispatch, splitActive: boolean, betStage) => {\n    console.log(splitActive)\n    if(!splitActive && !betStage){\n      console.log(\"stand\");\n      dispatch(setDealStage(false));\n    dispatch(setEvaluateStage(true));\n  } else if(splitActive && !hand1dealt){\n    dispatch(setHand1Dealt(true));\n  } else if(splitActive && hand1dealt){\n    dispatch(setDealStage(false));\n    dispatch(setEvaluateStage(true));\n  }\n  };\n  const handleSplitClick = () => {\n    if(hand[0].rank===hand[1].rank && !splitActive && stack >= pot){\n      dispatch(setSplitActive(true));\n      dispatch(playerSplit());\n      dispatch(playerDealCard(deck.dealCard()));\n      dispatch(playerDealCard2(deck.dealCard()));\n      dispatch(splitChips());\n\n    }\n\n\n  };\n  const handleDoubleClick = () => {\n    if(!dealStage || (!splitActive && score > 21) || stack < pot || (!(hand.length < 3)&& !splitActive) || score2 > 21 ){\n      return;\n    }\n    if(!splitActive){\n    const card = deck.dealCard();\n    dispatch(playerDealCard(card));\n    dispatch(setDealStage(false));\n    dispatch(setEvaluateStage(true));\n    dispatch(doubleChips());\n    } else if(splitActive && !hand1dealt){\n      const card = deck.dealCard();\n      dispatch(playerDealCard(card));\n      dispatch(setHand1Dealt(true));\n      dispatch(doubleChips());\n    } else if(splitActive && hand1dealt){\n      const card = deck.dealCard();\n      dispatch(playerDealCard2(card));\n      dispatch(setDealStage(false));\n     dispatch(setEvaluateStage(true));\n      dispatch(doubleChips2());\n    }\n\n  };\n\nexport { handleDealClick, handleHitClick};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}