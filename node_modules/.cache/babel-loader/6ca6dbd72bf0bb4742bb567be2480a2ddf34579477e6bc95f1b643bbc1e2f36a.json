{"ast":null,"code":"const {\n  setGameOver,\n  setEvaluateStage,\n  setBetStage,\n  setDealStage,\n  setSplitActive,\n  setDealerTurnComplete,\n  setTextOutcome,\n  setTextOutcome2,\n  resetDealerHand,\n  resetPlayerHand,\n  setHand1Dealt,\n  setIsBlackjack,\n  removeChips,\n  winChips,\n  setHandsLost,\n  setHandsWon,\n  setScore,\n  resetChips\n} = require('../../store');\nconst {\n  deck\n} = require('../Deck/deck');\nconst evaluateWinner = (dispatch, score, dealerScore, bet, pot, splitActive, score2, pot2) => {\n  if (score > 21) {\n    dispatch(setTextOutcome('Player Bust!'));\n    dispatch(removeChips(\"hand1\"));\n    dispatch(setHandsLost());\n  } else if (dealerScore > 21) {\n    dispatch(setTextOutcome('Dealer Bust!'));\n    dispatch(winChips(\"hand1\"));\n    dispatch(setScore(bet));\n    dispatch(setHandsWon());\n  } else if (score === dealerScore) {\n    dispatch(setTextOutcome('Push!'));\n    dispatch(resetChips(\"hand1\"));\n    dispatch(setHandsPushed());\n  } else if (score > dealerScore) {\n    dispatch(setTextOutcome('Player Wins!'));\n    dispatch(winChips(\"hand1\"));\n    dispatch(setScore(bet));\n    dispatch(setHandsWon());\n  } else {\n    dispatch(setTextOutcome('Dealer Wins!'));\n    dispatch(removeChips(\"hand1\"));\n    dispatch(setHandsLost());\n  }\n  if (splitActive) {\n    if (score2 > 21) {\n      dispatch(setTextOutcome2('Player Hand 2 Bust!'));\n      dispatch(removeChips(\"hand2\"));\n      dispatch(setHandsLost());\n    } else if (dealerScore > 21) {\n      dispatch(setTextOutcome2('Dealer Bust!'));\n      dispatch(winChips(\"hand2\"));\n      dispatch(setScore(pot2));\n      dispatch(setHandsWon());\n    } else if (score2 === dealerScore) {\n      dispatch(setTextOutcome2('Push!'));\n      dispatch(resetChips(\"hand2\"));\n      dispatch(setHandsPushed());\n    } else if (score2 > dealerScore) {\n      dispatch(setTextOutcome2('Player Wins!'));\n      dispatch(winChips(\"hand2\"));\n      dispatch(setScore(pot2));\n      dispatch(setHandsWon());\n    } else {\n      dispatch(setTextOutcome2('Dealer Wins!'));\n      dispatch(removeChips(\"hand2\"));\n      dispatch(setHandsLost());\n    }\n  }\n  dispatch(setGameOver(true));\n};\nconst resetGame = dispatch => {\n  dispatch(setGameOver(false));\n  dispatch(setEvaluateStage(false));\n  dispatch(setBetStage(true));\n  dispatch(setDealStage(false));\n  dispatch(setSplitActive(false));\n  dispatch(setDealerTurnComplete(false));\n  dispatch(setTextOutcome(''));\n  dispatch(setTextOutcome2(''));\n  dispatch(resetDealerHand());\n  dispatch(resetPlayerHand());\n  dispatch(setHand1Dealt(false));\n  dispatch(setIsBlackjack(false));\n  deck.resetDeck();\n};\nconst calculateScore = hand => {\n  let score = 0;\n  let aces = 0;\n  let blackjack = false;\n  hand.forEach(card => {\n    if (card.rank === 'A') {\n      aces++;\n    }\n    score += card.value;\n  });\n  if (aces > 0 && score + 10 <= 21) {\n    score += 10;\n  }\n  if (hand.length === 2 && score === 21) {\n    blackjack = true;\n  }\n  return score;\n};\nexport { resetGame, calculateScore, evaluateWinner };","map":{"version":3,"names":["setGameOver","setEvaluateStage","setBetStage","setDealStage","setSplitActive","setDealerTurnComplete","setTextOutcome","setTextOutcome2","resetDealerHand","resetPlayerHand","setHand1Dealt","setIsBlackjack","removeChips","winChips","setHandsLost","setHandsWon","setScore","resetChips","require","deck","evaluateWinner","dispatch","score","dealerScore","bet","pot","splitActive","score2","pot2","setHandsPushed","resetGame","resetDeck","calculateScore","hand","aces","blackjack","forEach","card","rank","value","length"],"sources":["/Users/adamdockstader/repos/blackjack/src/components/Game_Logic/game_logic.tsx"],"sourcesContent":["import { Dispatch } from \"redux\";\n\nconst { setGameOver, setEvaluateStage, setBetStage, setDealStage, setSplitActive, setDealerTurnComplete, setTextOutcome, setTextOutcome2, resetDealerHand, resetPlayerHand, setHand1Dealt, setIsBlackjack, removeChips, winChips, setHandsLost, setHandsWon, setScore, resetChips } = require('../../store');\nconst { deck } = require('../Deck/deck');\n\nconst evaluateWinner = (dispatch: Dispatch, score: number, dealerScore: number, bet: number, pot: number, splitActive: boolean,score2: number, pot2: number) => {\n        \n    if (score > 21) {\n      dispatch(setTextOutcome('Player Bust!'));\n      dispatch(removeChips(\"hand1\"));\n      dispatch(setHandsLost());\n\n    } else if (dealerScore > 21) {\n      dispatch(setTextOutcome('Dealer Bust!'));\n      dispatch(winChips(\"hand1\"));\n      dispatch(setScore(bet));\n      dispatch(setHandsWon());\n\n      } else if (score === dealerScore) {\n      dispatch(setTextOutcome('Push!'));\n      dispatch(resetChips(\"hand1\"));\n      dispatch(setHandsPushed());\n\n    } else if (score > dealerScore) {\n      dispatch(setTextOutcome('Player Wins!'));\n      dispatch(winChips(\"hand1\"));\n      dispatch(setScore(bet));\n      dispatch(setHandsWon());\n    } else {\n      dispatch(setTextOutcome('Dealer Wins!'));\n      dispatch(removeChips(\"hand1\"));\n      dispatch(setHandsLost());\n\n    }\n    if(splitActive){\n      if (score2 > 21) {\n        dispatch(setTextOutcome2('Player Hand 2 Bust!'));\n        dispatch(removeChips(\"hand2\"));\n        dispatch(setHandsLost());\n      }\n      else if (dealerScore > 21) {\n        dispatch(setTextOutcome2('Dealer Bust!'));\n        dispatch(winChips(\"hand2\"));\n        dispatch(setScore(pot2));\n        dispatch(setHandsWon());\n\n      } else if (score2 === dealerScore) {\n        dispatch(setTextOutcome2('Push!'));\n        dispatch(resetChips(\"hand2\"));\n        dispatch(setHandsPushed());\n\n      } else if (score2 > dealerScore) {\n        dispatch(setTextOutcome2('Player Wins!'));\n        dispatch(winChips(\"hand2\"));\n        dispatch(setScore(pot2));\n        dispatch(setHandsWon());\n      } else {\n        dispatch(setTextOutcome2('Dealer Wins!'));\n        dispatch(removeChips(\"hand2\"));\n        dispatch(setHandsLost());\n\n      }\n    }\n\n    dispatch(setGameOver(true));\n\n  };\n\n\n\nconst resetGame = (dispatch: Dispatch) => { \n    dispatch(setGameOver(false));\n    dispatch(setEvaluateStage(false));\n    dispatch(setBetStage(true));\n    dispatch(setDealStage(false));\n    dispatch(setSplitActive(false));\n    dispatch(setDealerTurnComplete(false));\n    dispatch(setTextOutcome(''));\n    dispatch(setTextOutcome2(''));\n    dispatch(resetDealerHand());\n    dispatch(resetPlayerHand());\n    dispatch(setHand1Dealt(false));\n    dispatch(setIsBlackjack(false));\n    deck.resetDeck();\n  };\n\n  const calculateScore = ((hand: any)=>{\n    let score = 0;\n    let aces = 0;\n    let blackjack = false;\n    hand.forEach((card: any) => {\n      if(card.rank === 'A'){\n        aces++;\n      }\n      score += card.value;\n    });\n    \n    if(aces > 0 && score + 10 <= 21){\n      score += 10;\n    }\n    if(hand.length === 2 && score === 21){\n      blackjack = true;\n    }\n    \n    return score;\n  \n  })\n\n\nexport { resetGame, calculateScore, evaluateWinner};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}