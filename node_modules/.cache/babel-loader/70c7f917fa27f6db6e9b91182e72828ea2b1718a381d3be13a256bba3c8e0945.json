{"ast":null,"code":"// Reducer.ts\nimport Deck from '../Actions/Deck'; // Adjust the path based on your project structure\n\nimport { SET_DECK, SHUFFLE_DECK, DEAL_CARD, SET_GAME_STATE, SET_PLAYER_STATE } from '../Actions/ActionTypes';\nconst initializeDeck = () => {\n  // Logic to create and return a new deck\n  // Example: Assuming Deck is a class with an initializeDeck method\n  const deck = new Deck();\n  deck.initializeDeck();\n  return deck.cards;\n};\nconst initialState = {\n  deck: initializeDeck(),\n  gameState: {\n    dealerScore: 0 /* other game state properties */\n  },\n  playerState: {\n    playerScore: 0 /* other player state properties */\n  }\n  // Add more initial state properties as needed\n};\nconst shuffleDeck = deck => {\n  // Fisher-Yates shuffle algorithm\n  const shuffledDeck = [...deck];\n  for (let i = shuffledDeck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n  }\n  return shuffledDeck;\n};\nconst dealCard = deck => {\n  // Logic to deal a card from the deck\n  const dealtCard = deck.pop();\n  return {\n    deck,\n    card: dealtCard\n  };\n};\nconst pokerReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_DECK:\n      return {\n        ...state,\n        deck: initializeDeck()\n      };\n    case SHUFFLE_DECK:\n      const shuffledDeck = shuffleDeck(state.deck);\n      return {\n        ...state,\n        deck: shuffledDeck\n      };\n    case DEAL_CARD:\n      const {\n        deck: dealtDeck,\n        card\n      } = dealCard(state.deck);\n      // You might want to update player and game state based on the dealt card\n      return {\n        ...state,\n        deck: dealtDeck\n      };\n    case SET_GAME_STATE:\n      return {\n        ...state,\n        gameState: action.payload\n      };\n    case SET_PLAYER_STATE:\n      return {\n        ...state,\n        playerState: action.payload\n      };\n    // Add more cases as needed\n    default:\n      return state;\n  }\n};\nexport default pokerReducer;","map":{"version":3,"names":["Deck","SET_DECK","SHUFFLE_DECK","DEAL_CARD","SET_GAME_STATE","SET_PLAYER_STATE","initializeDeck","deck","cards","initialState","gameState","dealerScore","playerState","playerScore","shuffleDeck","shuffledDeck","i","length","j","Math","floor","random","dealCard","dealtCard","pop","card","pokerReducer","state","action","type","dealtDeck","payload"],"sources":["/Users/adamdockstader/repos/blackjack/my-app/src/reducers/Reducer.ts"],"sourcesContent":["// Reducer.ts\nimport Deck from '../Actions/Deck'; // Adjust the path based on your project structure\n\nimport { SET_DECK, SHUFFLE_DECK, DEAL_CARD, SET_GAME_STATE, SET_PLAYER_STATE } from '../Actions/ActionTypes';\n\ninterface PokerState {\n  deck: any[]; // Change 'any' to the actual type of your deck\n  gameState: any; // Change 'any' to the actual type of your game state\n  playerState: any; // Change 'any' to the actual type of your player state\n  // Add more state properties as needed\n}\n\ninterface PokerAction {\n  type: string;\n  payload?: any;\n}\n\nconst initializeDeck = (): any[] => {\n  // Logic to create and return a new deck\n  // Example: Assuming Deck is a class with an initializeDeck method\n  const deck = new Deck();\n  deck.initializeDeck();\n  return deck.cards;\n};\n\nconst initialState: PokerState = {\n  deck: initializeDeck(),\n  gameState: { dealerScore: 0, /* other game state properties */ },\n  playerState: { playerScore: 0, /* other player state properties */ },\n  // Add more initial state properties as needed\n};\n\nconst shuffleDeck = (deck: any[]): any[] => {\n  // Fisher-Yates shuffle algorithm\n  const shuffledDeck = [...deck];\n  for (let i = shuffledDeck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n  }\n  return shuffledDeck;\n};\n\nconst dealCard = (deck: any[]): { deck: any[]; card: any } => {\n  // Logic to deal a card from the deck\n  const dealtCard = deck.pop();\n  return { deck, card: dealtCard };\n};\n\nconst pokerReducer = (state: PokerState = initialState, action: PokerAction): PokerState => {\n  switch (action.type) {\n    case SET_DECK:\n      return { ...state, deck: initializeDeck() };\n    case SHUFFLE_DECK:\n      const shuffledDeck = shuffleDeck(state.deck);\n      return { ...state, deck: shuffledDeck };\n    case DEAL_CARD:\n      const { deck: dealtDeck, card } = dealCard(state.deck);\n      // You might want to update player and game state based on the dealt card\n      return { ...state, deck: dealtDeck };\n    case SET_GAME_STATE:\n      return { ...state, gameState: action.payload };\n    case SET_PLAYER_STATE:\n      return { ...state, playerState: action.payload };\n    // Add more cases as needed\n    default:\n      return state;\n  }\n};\n\nexport default pokerReducer;\n"],"mappings":"AAAA;AACA,OAAOA,IAAI,MAAM,iBAAiB,CAAC,CAAC;;AAEpC,SAASC,QAAQ,EAAEC,YAAY,EAAEC,SAAS,EAAEC,cAAc,EAAEC,gBAAgB,QAAQ,wBAAwB;AAc5G,MAAMC,cAAc,GAAGA,CAAA,KAAa;EAClC;EACA;EACA,MAAMC,IAAI,GAAG,IAAIP,IAAI,CAAC,CAAC;EACvBO,IAAI,CAACD,cAAc,CAAC,CAAC;EACrB,OAAOC,IAAI,CAACC,KAAK;AACnB,CAAC;AAED,MAAMC,YAAwB,GAAG;EAC/BF,IAAI,EAAED,cAAc,CAAC,CAAC;EACtBI,SAAS,EAAE;IAAEC,WAAW,EAAE,CAAC,CAAE;EAAkC,CAAC;EAChEC,WAAW,EAAE;IAAEC,WAAW,EAAE,CAAC,CAAE;EAAoC;EACnE;AACF,CAAC;AAED,MAAMC,WAAW,GAAIP,IAAW,IAAY;EAC1C;EACA,MAAMQ,YAAY,GAAG,CAAC,GAAGR,IAAI,CAAC;EAC9B,KAAK,IAAIS,CAAC,GAAGD,YAAY,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAChD,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAACD,YAAY,CAACC,CAAC,CAAC,EAAED,YAAY,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,YAAY,CAACG,CAAC,CAAC,EAAEH,YAAY,CAACC,CAAC,CAAC,CAAC;EACzE;EACA,OAAOD,YAAY;AACrB,CAAC;AAED,MAAMO,QAAQ,GAAIf,IAAW,IAAiC;EAC5D;EACA,MAAMgB,SAAS,GAAGhB,IAAI,CAACiB,GAAG,CAAC,CAAC;EAC5B,OAAO;IAAEjB,IAAI;IAAEkB,IAAI,EAAEF;EAAU,CAAC;AAClC,CAAC;AAED,MAAMG,YAAY,GAAGA,CAACC,KAAiB,GAAGlB,YAAY,EAAEmB,MAAmB,KAAiB;EAC1F,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK5B,QAAQ;MACX,OAAO;QAAE,GAAG0B,KAAK;QAAEpB,IAAI,EAAED,cAAc,CAAC;MAAE,CAAC;IAC7C,KAAKJ,YAAY;MACf,MAAMa,YAAY,GAAGD,WAAW,CAACa,KAAK,CAACpB,IAAI,CAAC;MAC5C,OAAO;QAAE,GAAGoB,KAAK;QAAEpB,IAAI,EAAEQ;MAAa,CAAC;IACzC,KAAKZ,SAAS;MACZ,MAAM;QAAEI,IAAI,EAAEuB,SAAS;QAAEL;MAAK,CAAC,GAAGH,QAAQ,CAACK,KAAK,CAACpB,IAAI,CAAC;MACtD;MACA,OAAO;QAAE,GAAGoB,KAAK;QAAEpB,IAAI,EAAEuB;MAAU,CAAC;IACtC,KAAK1B,cAAc;MACjB,OAAO;QAAE,GAAGuB,KAAK;QAAEjB,SAAS,EAAEkB,MAAM,CAACG;MAAQ,CAAC;IAChD,KAAK1B,gBAAgB;MACnB,OAAO;QAAE,GAAGsB,KAAK;QAAEf,WAAW,EAAEgB,MAAM,CAACG;MAAQ,CAAC;IAClD;IACA;MACE,OAAOJ,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}