{"ast":null,"code":"var _jsxFileName = \"/Users/adamdockstader/repos/blackjack/src/components/Chips/ChipsList.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Chip from \"./Chip\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { resetChips } from \"../../store/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst chips = [{\n  amount: 1,\n  color: \"Red\"\n}, {\n  amount: 5,\n  color: \"Orange\"\n}, {\n  amount: 10,\n  color: \"Yellow\"\n}, {\n  amount: 25,\n  color: \"Blue\"\n}, {\n  amount: 50,\n  color: \"Pink\"\n}, {\n  amount: 100,\n  color: \"slategray\"\n}, {\n  amount: 500,\n  color: \"aqua\"\n}, {\n  amount: 1000,\n  color: \"Silver\"\n}];\nconst ChipsList = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    splitActive\n  } = useSelector(state => state.game);\n  const {\n    bet\n  } = useSelector(state => state.player);\n  const {\n    stack,\n    pot,\n    pot2\n  } = useSelector(state => state.chips);\n  const handleResetClick = () => {\n    dispatch(resetChips(\"hand1\"));\n  };\n  const handleChipClick = amount => {\n    dispatch({\n      type: \"chips/addChips\",\n      payload: amount\n    });\n  };\n  const renderChips = () => {\n    return chips.map((chip, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Chip, {\n          amount: chip.amount,\n          color: chip.color,\n          onClick: handleChipClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleResetClick,\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"m-5 font-bold\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), renderChips(), /*#__PURE__*/_jsxDEV(Chip, {\n        onClick: handleChipClick,\n        amount: stack,\n        color: \"Gold\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: !splitActive ? /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Pot: \", pot]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 27\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Pot: \", pot]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 49\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Pot2: \", pot2]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 68\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"m\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Stack: \", stack]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ChipsList, \"K3UhySlD/EsYaU7hoQ2/Xsw3alk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = ChipsList;\nexport default ChipsList;\nvar _c;\n$RefreshReg$(_c, \"ChipsList\");","map":{"version":3,"names":["React","Chip","useDispatch","useSelector","resetChips","jsxDEV","_jsxDEV","Fragment","_Fragment","chips","amount","color","ChipsList","_s","dispatch","splitActive","state","game","bet","player","stack","pot","pot2","handleResetClick","handleChipClick","type","payload","renderChips","map","chip","index","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/adamdockstader/repos/blackjack/src/components/Chips/ChipsList.tsx"],"sourcesContent":["import React from 'react';\nimport Chip from \"./Chip\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addChips, resetChips } from \"../../store/index\";\n\nconst chips = [\n  {amount: 1, color: \"Red\"},\n  {amount: 5, color: \"Orange\"},\n  {amount: 10, color: \"Yellow\"},\n  {amount: 25, color: \"Blue\"},\n  {amount: 50, color: \"Pink\"},\n  {amount: 100, color: \"slategray\"},\n  {amount: 500, color: \"aqua\"},\n  {amount: 1000, color: \"Silver\"}\n];\n\nconst ChipsList = () => {\n  const dispatch = useDispatch();\n  const { splitActive } = useSelector((state: any) => state.game);\n  const { bet } = useSelector((state: any) => state.player);\n  const {stack, pot, pot2}  = useSelector((state: any) => state.chips);\n\nconst handleResetClick = () => {\n    dispatch(resetChips(\"hand1\"));\n  }\n  \n  const handleChipClick = (amount: number) => {\n    dispatch({ type: \"chips/addChips\", payload: amount });\n  }\n  const renderChips = () => {\n    return chips.map((chip, index) => {\n      return (\n        <div key={index}>\n          <Chip\n            amount={chip.amount}\n            color={chip.color}\n            onClick={handleChipClick}\n          />\n        </div>\n      );\n    });\n  };\n\n  return (\n    <>\n      <div className=\"flex\">\n        <button onClick={handleResetClick}>\n          <h4 className='m-5 font-bold'>Reset</h4>\n        </button>\n        {renderChips()}\n        <Chip onClick={handleChipClick} amount={stack} color={\"Gold\"} />\n        <div className='flex flex-col'>\n          <div>\n            {!splitActive?<h2>Pot: {pot}</h2>:<><h2>Pot: {pot}</h2><h2>Pot2: {pot2}</h2></>}\n          </div>\n          <div className=\"m\">\n            <h2>Stack: {stack}</h2>\n          </div>\n         \n        </div>\n        \n      </div>\n    </>\n  )\n}\nexport default ChipsList;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAAmBC,UAAU,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzD,MAAMC,KAAK,GAAG,CACZ;EAACC,MAAM,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAK,CAAC,EACzB;EAACD,MAAM,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAQ,CAAC,EAC5B;EAACD,MAAM,EAAE,EAAE;EAAEC,KAAK,EAAE;AAAQ,CAAC,EAC7B;EAACD,MAAM,EAAE,EAAE;EAAEC,KAAK,EAAE;AAAM,CAAC,EAC3B;EAACD,MAAM,EAAE,EAAE;EAAEC,KAAK,EAAE;AAAM,CAAC,EAC3B;EAACD,MAAM,EAAE,GAAG;EAAEC,KAAK,EAAE;AAAW,CAAC,EACjC;EAACD,MAAM,EAAE,GAAG;EAAEC,KAAK,EAAE;AAAM,CAAC,EAC5B;EAACD,MAAM,EAAE,IAAI;EAAEC,KAAK,EAAE;AAAQ,CAAC,CAChC;AAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEa;EAAY,CAAC,GAAGZ,WAAW,CAAEa,KAAU,IAAKA,KAAK,CAACC,IAAI,CAAC;EAC/D,MAAM;IAAEC;EAAI,CAAC,GAAGf,WAAW,CAAEa,KAAU,IAAKA,KAAK,CAACG,MAAM,CAAC;EACzD,MAAM;IAACC,KAAK;IAAEC,GAAG;IAAEC;EAAI,CAAC,GAAInB,WAAW,CAAEa,KAAU,IAAKA,KAAK,CAACP,KAAK,CAAC;EAEtE,MAAMc,gBAAgB,GAAGA,CAAA,KAAM;IAC3BT,QAAQ,CAACV,UAAU,CAAC,OAAO,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMoB,eAAe,GAAId,MAAc,IAAK;IAC1CI,QAAQ,CAAC;MAAEW,IAAI,EAAE,gBAAgB;MAAEC,OAAO,EAAEhB;IAAO,CAAC,CAAC;EACvD,CAAC;EACD,MAAMiB,WAAW,GAAGA,CAAA,KAAM;IACxB,OAAOlB,KAAK,CAACmB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAChC,oBACExB,OAAA;QAAAyB,QAAA,eACEzB,OAAA,CAACL,IAAI;UACHS,MAAM,EAAEmB,IAAI,CAACnB,MAAO;UACpBC,KAAK,EAAEkB,IAAI,CAAClB,KAAM;UAClBqB,OAAO,EAAER;QAAgB;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B;MAAC,GALMN,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMV,CAAC;IAEV,CAAC,CAAC;EACJ,CAAC;EAED,oBACE9B,OAAA,CAAAE,SAAA;IAAAuB,QAAA,eACEzB,OAAA;MAAK+B,SAAS,EAAC,MAAM;MAAAN,QAAA,gBACnBzB,OAAA;QAAQ0B,OAAO,EAAET,gBAAiB;QAAAQ,QAAA,eAChCzB,OAAA;UAAI+B,SAAS,EAAC,eAAe;UAAAN,QAAA,EAAC;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,EACRT,WAAW,CAAC,CAAC,eACdrB,OAAA,CAACL,IAAI;QAAC+B,OAAO,EAAER,eAAgB;QAACd,MAAM,EAAEU,KAAM;QAACT,KAAK,EAAE;MAAO;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChE9B,OAAA;QAAK+B,SAAS,EAAC,eAAe;QAAAN,QAAA,gBAC5BzB,OAAA;UAAAyB,QAAA,EACG,CAAChB,WAAW,gBAACT,OAAA;YAAAyB,QAAA,GAAI,OAAK,EAACV,GAAG;UAAA;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,gBAAC9B,OAAA,CAAAE,SAAA;YAAAuB,QAAA,gBAAEzB,OAAA;cAAAyB,QAAA,GAAI,OAAK,EAACV,GAAG;YAAA;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAAA9B,OAAA;cAAAyB,QAAA,GAAI,QAAM,EAACT,IAAI;YAAA;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,eAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5E,CAAC,eACN9B,OAAA;UAAK+B,SAAS,EAAC,GAAG;UAAAN,QAAA,eAChBzB,OAAA;YAAAyB,QAAA,GAAI,SAAO,EAACX,KAAK;UAAA;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEH;EAAC,gBACN,CAAC;AAEP,CAAC;AAAAvB,EAAA,CAhDKD,SAAS;EAAA,QACIV,WAAW,EACJC,WAAW,EACnBA,WAAW,EACCA,WAAW;AAAA;AAAAmC,EAAA,GAJnC1B,SAAS;AAiDf,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}