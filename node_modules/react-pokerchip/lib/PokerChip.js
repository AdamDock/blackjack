"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
require("./PokerChip.css");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
/*jshint esversion: 7 */

/* Chip design by PMK: https://codepen.io/pmk/pen/GgrJRq */

var DEFAULTS = Object.freeze({
  size: 151,
  color: "#FFF",
  lineColor: "#FFF",
  disabledOpacity: 0.4
});
var getValueText = function getValueText(value, currency) {
  // Converts value to string that can fit on chip (max 3 significant digits)
  if (value === undefined) {
    return "";
  }
  var val = value.toString();
  if (val.length > 3) {
    // If string needs modification to fit on chip
    var trail = val.substring(3); // Get digits, from 4th to last
    if (Number(trail) !== 0) {
      // If trail has a non-zero digit
      throw new Error("PokerChip value has too many significant digits");
    }
    var start = val.slice(0, 3); // Get first 3 digits
    if (trail.length < 4) {
      // 999 < val < 1000000
      val = Number(start) / (100 / Math.pow(10, trail.length - 1)); // Place decimal point if needed. Decimal position determined from length of trail
      val = val.toString() + "k";
    } else {
      // 999999 < val < 1000000000
      val = Number(start) / (100 / Math.pow(10, trail.length - 4)); // Place decimal point if needed. Decimal position determined from length of trail
      val = val.toString() + "M";
    }
  }
  return currency + val;
};
var getFontSize = function getFontSize(value) {
  if (value.length === 4) {
    return "48px";
  }
  if (value.length === 5) {
    return "39px";
  }
  if (value.length === 6) {
    return "32px";
  }
};
var checkProps = function checkProps(props) {
  if (props.value !== undefined && (props.value < 1 || props.value > 999999999)) {
    throw new Error("PokerChip value cannot be less than 1 or greater than 999,999,999");
  }
  if (props.size !== undefined && !Number.isFinite(props.size)) {
    throw new Error("PokerChip size must be a number");
  }
  if (props.text !== undefined && props.text.length > 6) {
    throw new Error("Max PokerChip text length is 6");
  }
  if (props.onClick !== undefined && typeof props.onClick !== "function") {
    throw new Error("PokerChip 'onClick' prop must be a function");
  }
  if (props.disabled !== undefined && typeof props.disabled !== "boolean") {
    throw new Error("PokerChip 'disabled' prop must be a boolean");
  }
  if (props.currency !== undefined && (typeof props.currency !== "string" || props.currency.length > 1)) {
    throw new Error("PokerChip currency is not valid. Provide a one character string");
  }
};
var PokerChip = function PokerChip(props) {
  checkProps(props);
  var size = props.size || DEFAULTS.size;
  var sizeScale = size / DEFAULTS.size;
  var color = props.color || DEFAULTS.color;
  var lineColor = props.lineColor || DEFAULTS.color;
  var currency = props.currency || "";
  var value = getValueText(props.value, currency);
  var fontSize = getFontSize(props.text || value);
  var outerColor = darken(color, 25); // Outer color, inner color
  var innerLineColor = darken(lineColor, 8); // Light inner ring color
  var innerLineGapColor = darken(color, 32); // Light inner ring color gap color, text color

  var outerBackgroundImage = "linear-gradient(0deg, transparent 0, transparent 67.5px, ".concat(lineColor, " 67.5px, ").concat(lineColor, " 83.5px, transparent 83.5px, transparent 151px), linear-gradient(60deg, transparent 0, transparent 97.4304px, ").concat(lineColor, " 97.4304px, ").concat(lineColor, " 113.4304px, transparent 113.4304px, transparent 151px), linear-gradient(120deg, ").concat(outerColor, " 0, ").concat(outerColor, " 97.4304px, ").concat(lineColor, " 97.4304px, ").concat(lineColor, " 113.4304px, ").concat(outerColor, " 113.4304px, ").concat(outerColor, " 151px)");
  var innerBackgroundImage = "linear-gradient(0deg, transparent 0, transparent 69.5px, ".concat(innerLineColor, " 69.5px, ").concat(innerLineColor, " 81.5px, transparent 81.5px, transparent 151px), linear-gradient(30deg, transparent 0, transparent 98.7104px, ").concat(innerLineColor, " 98.7104px, ").concat(innerLineColor, " 110.7104px, transparent 110.7104px, transparent 151px), linear-gradient(60deg, transparent 0, transparent 98.7104px, ").concat(innerLineColor, " 98.7104px, ").concat(innerLineColor, " 110.7104px, transparent 110.7104px, transparent 151px), linear-gradient(90deg, transparent 0, transparent 69.5px, ").concat(innerLineColor, " 69.5px, ").concat(innerLineColor, " 81.5px, transparent 81.5px, transparent 151px), linear-gradient(120deg, transparent 0, transparent 98.7104px, ").concat(innerLineColor, " 98.7104px, ").concat(innerLineColor, " 110.7104px, transparent 110.7104px, transparent 151px), linear-gradient(150deg, ").concat(innerLineGapColor, " 0, ").concat(innerLineGapColor, " 98.7104px, ").concat(innerLineColor, " 98.7104px, ").concat(innerLineColor, " 110.7104px, ").concat(innerLineGapColor, " 110.7104px, ").concat(innerLineGapColor, " 151px)");
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "pokerchip",
    style: {
      width: size,
      height: size
    }
  }, " ", /*#__PURE__*/_react["default"].createElement("div", {
    className: "pokerchipOuter",
    style: {
      backgroundImage: outerBackgroundImage,
      transform: "scale(".concat(sizeScale, ")"),
      opacity: props.disabled && DEFAULTS.disabledOpacity,
      cursor: props.disabled ? "not-allowed" : props.onClick ? "pointer" : "default"
    },
    onClick: props.onClick
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "innerChipBorder",
    style: {
      backgroundImage: innerBackgroundImage,
      border: "8px solid ".concat(outerColor)
    }
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: "chipContent",
    style: {
      background: outerColor,
      color: innerLineGapColor,
      fontSize: fontSize
    }
  }, props.text || value)));
};
var _default = PokerChip;
/* Utility Functions, start */
exports["default"] = _default;
var darken = function darken(color, percent) {
  // Darkens rbg color by given percent
  var c = isColor(color);
  var rgb = c.match(/\d+/g).map(Number);
  rgb = rgb.map(function (el) {
    return Math.round(el - el * percent / 100);
  });
  return "rgb(".concat(rgb[0], ",").concat(rgb[1], ",").concat(rgb[2], ")");
};
var isColor = function isColor(strColor) {
  // Adapted from: https://stackoverflow.com/questions/48484767/javascript-check-if-string-is-valid-css-color, Lee Goddard, 2019
  var s = new Option().style;
  s.color = strColor;
  if (!s.color) {
    throw new Error("Invalid poker chip color or line color. Must be hex, rgb, or hsl");
  }
  return s.color;
};

/* Utility Functions, end */